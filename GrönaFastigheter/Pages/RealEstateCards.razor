@using System.Net.Http.Json;
@using Entities.Models
@inject IRealEstateHttpsRepository context
@inject NavigationManager NavManager


@if (realEstates == null)
{
    <p>Loading.....</p>
}
else
{
    foreach (var estate in CurrentRealEstateList)
    {
        int price = 0;
        if (estate.CanBeSold)
            price = estate.SellingPrice;
        else
            price = estate.RentingPrice;
        string typeOfSale = "";
        @if (estate.CanBeSold)
        {
            typeOfSale = "Säljes";
        }
        else
        {
            typeOfSale = "Uthyres";
        }

        <div class="card-container">
            <div class="estate-card" @onclick="@(e => RedirectToEstate(estate.Id))">
                <div class="card-img">
                    <img src="https://images.unsplash.com/photo-1580587771525-78b9dba3b914?ixlib=rb-1.2.1&w=1000&q=80" alt="Bilden kunde inte visas" />
                </div>
                <div class="card-data">
                    <div>
                        <h4>@estate.Title</h4>
                        <p>@typeOfSale</p>
                        <p>@estate.Address</p>
                    </div>
                    <div class="card-data-row">
                        <div class="card-data-row-item">
                            <p>@estate.RealEstateType</p>
                        </div>
                        <div class="card-data-row-item">
                            <p>@price</p>
                        </div>
                        <div class="card-data-row-item">
                            <p>@estate.ConstructionYear</p>
                        </div>
                    </div>
                    <div class="card-data-row">
                        <p>@estate.Description</p>
                    </div>
                    <div class="card-data-row estate-seller">
                        <h5>Annonsör:</h5>
                        <p>Kalle Karlsson</p>
                    </div>
                </div>
            </div>
        </div>
    }
<div>
    <p>Sida: @(searchData.CurrentPage+1) av @GetAmountOfPages() (@FilteredEstates.Count annonser).</p>
    <input type="button" value="Föregående Sida" @onclick="(e=>ChangePage(false))" />
    <input type="button" value="Nästa Sida" @onclick="(e=>ChangePage(true))" />
    <input type="button" value="Första Sidan" @onclick="(e=>ChangePage(0))" />
</div>
    <div class="btn" @onclick="@(e => ViewMoreEstates())">Visa fler annonser...</div>
}

@code {
    public List<RealEstate> CurrentRealEstateList => GetPageOfEstates(FilteredEstates, searchData.CurrentPage);
    public int ListPage = 0;
    [Parameter]
    public int Page { get; set; }
    [Parameter]
    public int NumItems { get; set; }
    private List<RealEstate> realEstates;
    [CascadingParameter]
    public SearchData searchData { get; set; }
    private List<RealEstate> FilteredEstates => FilterList();
    /// <summary>
    /// This runs everytime the cascading searchterm parameter is updated.
    /// </summary>
    /// <returns></returns>
    private List<RealEstate> FilterList()
    {
        List<RealEstate> tempEstates = realEstates.Where(

        i => searchData.TitleCheck ? i.Title.ToLower().Contains(searchData.Searchterm.ToLower()) : i.Title.Contains("") &&
        searchData.AdressCheck ? i.Address.ToLower().Contains(searchData.Searchterm.ToLower()) : i.Address.Contains("") &&
        //todo: En bug när man söker på både adress och type så får man ibland inga resulat. "apartment" funkar för type men inte för type och adress.
        searchData.TypeCheck ? i.RealEstateType.ToLower().Contains(searchData.Searchterm.ToLower()) : i.RealEstateType.Contains("")
        ).ToList();

        if (searchData.OrderBy == OrderAlternatives[0])
        {
            tempEstates = tempEstates.OrderBy(x => x.SellingPrice).ToList();
        }
        else if (searchData.OrderBy == OrderAlternatives[1])
        {
            tempEstates = tempEstates.OrderBy(x => x.RentingPrice).ToList();
        }
        else if (searchData.OrderBy == OrderAlternatives[2])
        {
            tempEstates = tempEstates.OrderBy(x => x.Title).ToList();
        }
        else if (searchData.OrderBy == OrderAlternatives[3])
        {
            tempEstates = tempEstates.OrderBy(x => x.Address).ToList();
        }
        return tempEstates;
    }
    public List<string> OrderAlternatives { get; set; } = new List<string> {
        "Hyra",
        "Säljpris",
        "Titel",
        "Adress"
       };

    protected override async Task OnInitializedAsync()
    {
        var response = await context.GetRealEstates(); //TODO: Om det finns mer att hämta i databasen efter detta request ska vi hämta igen.
        realEstates = response.ToList();
    }

    private async Task ViewMoreEstates()
    {
        int estatesToSkip = realEstates.Count;
        IEnumerable<RealEstate> moreEstates = await context.GetRealEstates(estatesToSkip, 5);
        realEstates.AddRange(moreEstates);
    }
    private void ChangePage(bool nextPage)
    {
        if (nextPage)
        {
            searchData.CurrentPage += 1;
            if (searchData.CurrentPage + 1 > GetAmountOfPages())
            {
                searchData.CurrentPage = GetAmountOfPages() - 1;
            }
        }
        else
        {
            if(searchData.CurrentPage -1 < 0)
            {
                searchData.CurrentPage = 0;
            }
            else
            {
                searchData.CurrentPage -= 1;
            }
        }
    }
    private void ChangePage(int firstpage)
    {
        searchData.CurrentPage = firstpage;
    }

    private void RedirectToEstate(int id)
    {
        NavManager.NavigateTo("/realestate/" + id);
    }

    List<RealEstate> GetPageOfEstates(List<RealEstate> list, int page = 0, int pageSize = 10)
    {
        return list.Skip(page * pageSize).Take(pageSize).ToList();
    }
    private int GetAmountOfPages()
    {
        decimal result = Math.Floor((decimal)FilteredEstates.Count / 10);
        int numberOfPages = (int)result;
        if(numberOfPages < 1)
        {
            return numberOfPages = 1;
        }
        return numberOfPages+1;

    }
}
