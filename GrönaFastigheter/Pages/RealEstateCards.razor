@using System.Net.Http.Json;
@using Entities.Models
@inject IRealEstateHttpsRepository context
@inject NavigationManager NavManager


@if (realEstates == null)
{
    <p>Loading.....</p>
}
else
{
    foreach (var estate in CurrentRealEstateList)
    {

        string typeOfSale = "";
        @if (estate.CanBeSold)
        {
            typeOfSale = "Säljes";
        }
        if (estate.CanBeRented)
        {
            typeOfSale = "Uthyres";
        }
        @if (estate.CanBeSold && estate.CanBeRented)
        {
            typeOfSale = "Säljes/Uthyres";
        }

        <a href="/realestate/@estate.Id" class="text-dark text-decoration-none">
            <div class="px-5 mb-5">
                <div class="card mb-3 shadow">
                    <img class="card-img card-img-top" src="@estate.ImageUrl" alt="Bilden kunde inte visas">
                    <div class="card-body row pb-0">
                        <div class="col">
                            <h3 class="card-title">@estate.Title</h3>
                        </div>
                        <div class="col text-right">
                            <h4>@typeOfSale</h4>
                        </div>
                    </div>
                    <div class="card-body row py-0 px-3">
                        <div class="col">
                            <hr />
                        </div>
                    </div>
                    <div class="card-body row">
                        <div class="col">
                            @if (estate.SellingPrice > 0)
                            {
                                <h5>Säjpris: @(estate.SellingPrice)kr</h5>
                            }
                            @if (estate.RentingPrice > 0)
                            {
                                <h5>Hyra: @(estate.RentingPrice)kr / månad</h5>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </a>
    }

<div class="container mb-5">
    <div class="row justify-content-center">
        <p>Sida: @(searchData.CurrentPage+1) av @GetAmountOfPages() (@FilteredEstates.Count annonser)</p>
    </div>
    <div class="row justify-content-center mb-1">
        <input type="button" class="mx-1" value="Föregående sida" @onclick="(e=>ChangePage(false))" />
        @if (searchData.CurrentPage >= GetAmountOfPages() - 1)
        {
            <input type="button" value="Nästa Sida" @onclick="(e=>ChangePage(true))" disabled />
        }
        else
        {
            <input type="button" class="mx-1" value="Nästa sida" @onclick="(e=>ChangePage(true))" />
        }
    </div>
    <div class="row justify-content-center">
        <input type="button" class="mx-1" value="Första sidan" @onclick="(e=>ChangePage(0))" />
    </div>
</div>
}

@code {
    public List<RealEstate> CurrentRealEstateList => GetPageOfEstates(FilteredEstates, searchData.CurrentPage);
    public int ListPage = 0;
    [Parameter]
    public int Page { get; set; }
    [Parameter]
    public int NumItems { get; set; }
    private List<RealEstate> realEstates;
    [CascadingParameter]
    public SearchData searchData { get; set; }
    private List<RealEstate> FilteredEstates => FilterList();
    /// <summary>
    /// This runs everytime the cascading searchterm parameter is updated.
    /// </summary>
    /// <returns></returns>
    private List<RealEstate> FilterList()
    {
        List<RealEstate> tempEstates = realEstates.Where(
             i => i.Title.ToLower().Contains(searchData.Searchterm.ToLower())
        ).ToList();
        return tempEstates;

    }
    public List<string> OrderAlternatives { get; set; } = new List<string> {
        "Hyra",
        "Säljpris",
        "Titel",
        "Adress"
       };

    protected override async Task OnInitializedAsync()
    {
        var response = await context.GetRealEstates(); //TODO: Om det finns mer att hämta i databasen efter detta request ska vi hämta igen.
        if (response != null)
        {
            realEstates = response.ToList();
            foreach (var item in realEstates)
            {
                Console.WriteLine(item.Title);
                Console.WriteLine(item.Id);
                if (item.ImageUrl == null)
                {
                    item.ImageUrl = "https://images.unsplash.com/photo-1580587771525-78b9dba3b914?ixlib=rb-1.2.1&w=1000&q=80";
                }

            }
        }


    }


    //private async Task ViewMoreEstates() //TOdo: Den här ska bort
    //{
    //    int estatesToSkip = realEstates.Count;
    //    try
    //    {
    //        IEnumerable<RealEstate> moreEstates = await context.GetRealEstates(estatesToSkip, 5);
    //        realEstates.AddRange(moreEstates);
    //    }
    //    catch
    //    {
    //    }
    //}
    private void ChangePage(bool nextPage)
    {
        if (nextPage)
        {
            searchData.CurrentPage += 1;
            if (searchData.CurrentPage + 1 > GetAmountOfPages())
            {
                searchData.CurrentPage = GetAmountOfPages() - 1;
            }
        }
        else
        {
            if (searchData.CurrentPage - 1 < 0)
            {
                searchData.CurrentPage = 0;
            }
            else
            {
                searchData.CurrentPage -= 1;
            }
        }
    }
    private void ChangePage(int firstpage)
    {
        searchData.CurrentPage = firstpage;
    }

    private void RedirectToEstate(int id)
    {
        NavManager.NavigateTo("/realestate/" + id);
    }

    List<RealEstate> GetPageOfEstates(List<RealEstate> list, int page = 0, int pageSize = 10)
    {
        return list.Skip(page * pageSize).Take(pageSize).ToList();
    }
    private int GetAmountOfPages()
    {
        decimal result = Math.Floor((decimal)FilteredEstates.Count / 10);
        int numberOfPages = (int)result;
        if (numberOfPages < 1)
        {
            return numberOfPages = 1;
        }
        return numberOfPages + 1;

    }
}
